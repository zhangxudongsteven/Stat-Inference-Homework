rm(df.train, df.test, df.test.ans, df.train.target)
df.workset <- read.csv("data/loan/workset_imputed.csv")
df.workset.default <- as.integer(df.workset$loss > 0)
df.workset.data <- df.workset[,2:770]
df.workset <- read.csv("data/LoanPredict/workset_imputed.csv")
df.workset.default <- as.integer(df.workset$loss > 0)
df.workset.data <- df.workset[,2:770]
library(xgboost)
bst <- xgboost(data = as.matrix(df.train.data), label = df.train.default, nrounds = 400)
xgb.save(bst, "LoanPredict/model/xgboost.loan.halfhalfset.400rounds.model")
# run it on test set for 0.5 quantile
pred <- predict(bst, as.matrix(df.test.data))
flag <- pred < quantile(pred, 0.5)
pred[flag] = 0
pred[!flag] = 1
table(pred, df.test.default) / length(df.test.default) * 100
# run it on work set for 0.8 quantile
pred <- predict(bst, as.matrix(df.workset.data))
flag <- pred < quantile(pred, 0.8)
pred[flag] = 0
pred[!flag] = 1
table(pred, df.workset.default) / length(df.workset.default) * 100
# draw the density diagram
pred <- predict(bst, as.matrix(df.test.data))
temp <- data.frame(pred, df.test.default)
e <- ggplot(temp, aes(pred))
rm(temp)
e + geom_density() + facet_grid(.~df.test.default)
library(ggplot2)
a <- 1:100
b <- rnorm(100)
b <- a * 4 + b
f <- lm(b ~ a)
summary(f)
plot(a,b)
t.test(a,b)
t <- t.test(a,b)
t$p.value
c <- a + rnorm(100, sd = 10)
plot(a, c)
t.test(a, c)
t.test(a, c)$p
t.test(a, c)$p.value
d <- 100:150
t.test(a, d)
d <- 10:60
t.test(a, d)
d <- 5:55
t.test(a, d)
d <- 5:105
t.test(a, d)
data(sleep)
dim(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
diff <- g2 - g1
mn <- mean(diff)
s <- sd(diff)
n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
?qt
qt(.975, 9)
t.test(differece)
t.test(diff)
t.test(g1,g2)
t.test(g1,g2,paired = TRUE)
t.test(g2,g1,paired = TRUE)
t.test(g2,g1,paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE, var.equal = FALSE)$conf
df <- read.csv("data/LoanPredict/workset_half_half.csv")
rm(df)
qt(.95, 100)
qt(.95, 10000)
qt(.95, 10)
qnorm(.95, 10)
qnorm(.95)
qt(0.025, 15)
log(10)
log10(100)
log10(1)
log2(100)
df <- read.csv("data/LoanPredict/workset_half_half.csv")
a <- 1:10
b <- 2:11
t.test(a, b, paired = T)
t.test(a, b, paired = TRUE)
b <- b + rnorm(10)
t.test(a, b, paired = TRUE)
1100 + c(-1, 1) * qt(0.975, (9 - 1)) * (30 / sqrt(9))
-2 + qt(0.975, (9 - 1)) * (x / sqrt(9)) = 0
2 / qt(0.975, (9 - 1)) * sqrt(9)
3 - 5 + c(-1, 1) * qt(0.975, 10 + 10 - 2) * sqrt(0.6 / 10 + 0.68 / 10)
n1 <- n2 <- 9
x1 <- -3 ##treated
x2 <- 1 ##placebo
s1 <- 1.5 ##treated
s2 <- 1.8 ##placebo
s <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2)/(n1 + n2 - 2))
(x1 - x2) + c(-1, 1) * qt(0.95, n1 + n2 - 2) * s * sqrt(1/n1 + 1/n2)
n1 <- n2 <- 100
xbar1 <- 4
xbar2 <- 6
s1 <- 0.5
s2 <- 2
xbar2 - xbar1 + c(-1, 1) * qnorm(0.975) * sqrt(s1^2/n1 + s2^2/n2)
mu0 <- 30
mua <- 32
sigma <- 4
n <- 16
z <- qnorm(1 - alpha)
alpha <- 0.05
z <- qnorm(1 - alpha)
pnorm(mu0 + z * sigma / sqrt(n), mean = mu0, sd = sigma / sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z * sigma / sqrt(n), mean = mua, sd = sigma / sqrt(n), lower.tail = FALSE)
library(manipulate)
install.packages("manipulate")
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "red")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_line(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
?geom_line
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "red")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_line(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "red")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")
?power.t.test
power.t.test(power = 80, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
a <- 1:10
b <- a + rnorm(10)
t.test(a,b)
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000) {
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y ~ x))$coeff[2, 4]
}
# Controls false positive rate
sum(pValues < 0.05)
p.adjust(pValues, method = "bonferroni")
p.adjust(pValues, method = "BH")
?p.adjust
plot(pValues, p.adjust(pValues, method = "BH"), pch = 19)
bl <- c(140, 138, 150, 148, 135)
fu <- c(132, 135, 151, 146, 130)
diff <- bl - fu
t.test(diff)
t.test(bl, fu, paired = T)
1100 + c(1, -1) * pt(0.975, 8) * (30 / sqrt(9))
1100 + c(1, -1) * qt(0.975, 8) * (30 / sqrt(9))
pnorm(0.975)
qnorm(0.975)
qnorm(0.975, lower.tail = TRUE)
qnorm(0.025, lower.tail = TRUE)
qnorm(0.025, lower.tail = FALSE)
?qnorm
dnorm(1)
dnorm(0)
dnorm(10)
dnorm(100)
qnorm(1)
qnorm(.999)
qnorm(0.975)
qnorm(0.95)
pnorm(1)
pnorm(0)
pnorm(1.96)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
choose(4, 3) * 0.5^4 + choose(4, 4) * 0.5^4
ppois(10, lambda = 0.01 * 1787)
n1 <- n2 <- 9
x1 <- -3 ##treated
x2 <- 1 ##placebo
s1 <- 1.5 ##treated
s2 <- 1.8 ##placebo
s <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2)/(n1 + n2 - 2))
ts <- (x1 - x2)/(s * sqrt(1/n1 + 1/n2))
2 * pt(ts, n1 + n2 - 2)
pnorm(1.645 * 0.004, mean = 0.01, sd = 0.004, lower.tail = FALSE)
ceiling((4 * (qnorm(0.95) - qnorm(0.1)))^2)
choose(4,0)
pbinom(1, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(0, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(5, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 5, prob = 0.5, lower.tail = FALSE)
a <- 1:100
b <- 1:100 + rnorm(100) / 10
t.test(a,b, paired = T)
t.test(b,a, paired = T)
b <- 1:100 + rnorm(100) / 100
t.test(b,a, paired = T)
b <- 1:100 + rnorm(100) / 10000
t.test(b,a, paired = T)
b <- 1:100 + rnorm(100) / 1000
t.test(b,a, paired = T)
diff <- b - a
diff.m <- mean(diif)
diff.m <- mean(diff)
diff.sd <- sd(diff)
diff.ee <- diff.sd / sqrt(100)
diff.m + c(-1,1) * qt(0.975, 99) * diff.ee
diff.conf + c(-1,1) * qt(0.975, 99) * diff.ee
diff.conf <- diff.m + c(-1,1) * qt(0.975, 99) * diff.ee
diff.conf
diff.mean
diff.m
diff.m / diff.ee
diff.t <- diff.m / diff.ee
diff.t
diff.p <- pt(q = diff.t, df = (100 - 1), lower.tail = FALSE)
diff.p
?t.test
plot(a ~ b)
pt(0,100)
pt(0, 99)
pt(0, 99, lower.tail = F)
pt(0.1, 99, lower.tail = F)
diff.p * 2
diff.p <- pt(q = diff.t, df = (100 - 1), lower.tail = FALSE) * 2
diff.p
qt(0.975,100)
qt(0.975,10000)
qt(0.975, 10000)
qt(0.025, 10000)
ppois(10, 10)
ppois(1, 1)
ppois(0, 1)
ppois(2, 1)
dpois(0,1)
dpois(1,1)
dpois(2,1)
dpois(3,1)
dpois(0,2)
dpois(1,2)
dpois(2,2)
dpois(3,2)
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05)$power
power.t.test(n = 100, delta = 0.01, sd = 0.2, sig.level = 0.05)$power
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.95)$power
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05)$power
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05)
?power.t.test
power.t.test(n = 100, delta = 0.01, sd = 0.2, sig.level = 0.05, alternative = "one.sided")$power
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05, alternative = "one.sided")$power
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05, alternative = "one.sided", type = "one.sample")$power
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05, type = "one.sample")$power
power.t.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05, alternative = "one.sided", type = "one.sample")$power
power.z.test(n = 100, delta = 0.01, sd = 0.04, sig.level = 0.05, alternative = "one.sided", type = "one.sample")$power
setwd("stat")
getwd()
dir
dir()
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
?rexp
rexp(10)
plot(rexp(100))
hist(rexp(100))
hist(rexp(1000))
library(ggplot2)
qplot(rexp(1000))
qplot(rexp(1000), bins = 40)
qplot(rexp(1000), bins = 30)
ggplot(rexp(1000)) + geom_freqpoly()
df <- data.frame(rexp(1000))
names(df)
names(df) <- x
names(df) <- "x"
ggplot(df, aex(x)) + geom_freqpoly()
ggplot(df, aes(x)) + geom_freqpoly()
df <- data.frame(rexp(10000))
names(df) <- "x"
ggplot(df, aes(x)) + geom_freqpoly()
set.seed(7)
groups <- 40
n <- 1000
exp.mat <- matrix(data = rexp(groups * n), nrow = groups)
apply(exp.mat, 1, mean)
mean(exp.mat[1,])
length(exp.mat[1,])
qplot(apply(exp.mat, 1, mean))
qplot(apply(exp.mat, 1, mean), bins = 10)
qplot(apply(exp.mat, 1, mean), bins = 15)
qplot(apply(exp.mat, 1, mean), bins = 20)
qplot(apply(exp.mat, 1, mean), bins = 40)
pexp(0.5, rate = 5)
?rexp
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(ggplot2)
# Chunk 2: simulation
set.seed(7)
groups <- 40
n <- 1000
exp.mat <- matrix(data = rexp(groups * n, rate = 0.2), nrow = groups)
exp.means <- apply(exp.mat, 1, mean)
qplot(apply(exp.mat, 1, mean), bins = 40)
mean(exp.means)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.1)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05) + geom_rug()
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05) + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 3)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05) + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 2)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05, col = "blue") + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 2)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05) + geom_rug(col = "blue") + geom_vline(xintercept = mean(exp.means), size = 2)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05) + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 2)
standard_deviation_dist <- sd(exp.means)
standard_deviation_dist
standard_deviation_theory <- (1/lambda)/sqrt(n)
standard_deviation_theory
lambda <- 0.2
standard_deviation_theory <- (1/lambda)/sqrt(n)
standard_deviation_theory
variance_dist <- standard_deviation_dist^2
variance_dist
variance_theory <- ((1/lambda)*(1/sqrt(n)))^2
variance_theory
exp.means.mean.interval <- exp.means.mean - (1 / lambda) + c(-1, 1) * qt(0.975, 39) * exp.means.var
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Chunk 2: simulation
set.seed(56)
groups <- 40
n <- 1000
lambda <- 0.2
exp.mat <- matrix(data = rexp(groups * n, rate = lambda), nrow = groups)
# Chunk 3: means
exp.means <- apply(exp.mat, 1, mean)
exp.means.mean <- mean(exp.means)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.05) + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 1, col = "red") + geom_vline(xintercept = 1 / lambda, size = 1, col = "orange")
exp.means.mean.interval <- exp.means.mean - (1 / lambda) + c(-1, 1) * qt(0.975, 39) * exp.means.var
exp.means.var <- sd(exp.means) ^ 2
exp.means.mean.interval <- exp.means.mean - (1 / lambda) + c(-1, 1) * qt(0.975, 39) * exp.means.var
exp.means.mean.interval
(1 / lambda) / sqrt(40)
((1 / lambda) / sqrt(40)) ^ 2
(1 / lambda) ^ 2 / n
n
sd(exp.means)
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.1) + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 1, col = "red") + geom_vline(xintercept = 1 / lambda, size = 1, col = "orange") + stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = 1 / lambda))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Chunk 2: simulation
set.seed(56)
groups <- 1000
n <- 40
lambda <- 0.2
exp.mat <- matrix(data = rexp(groups * n, rate = lambda), nrow = groups)
# Chunk 3: means
exp.means <- apply(exp.mat, 1, mean)
exp.means.mean <- mean(exp.means)
# Chunk 4: variances
exp.means.var <- sd(exp.means) ^ 2
exp.means.var.theory <- (1 / lambda) ^ 2 / n
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Chunk 2: simulation
set.seed(56)
groups <- 1000
n <- 40
lambda <- 0.2
exp.mat <- matrix(data = rexp(groups * n, rate = lambda), nrow = groups)
# Chunk 3: means
exp.means <- apply(exp.mat, 1, mean)
exp.means.mean <- mean(exp.means)
# Chunk 4: variances
exp.means.var <- sd(exp.means) ^ 2
exp.means.var.theory <- (1 / lambda) ^ 2 / n
# Chunk 5: distribution
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.1) + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 1, col = "red") + geom_vline(xintercept = 1 / lambda, size = 1, col = "orange") + stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = 1 / lambda))
ggplot(data.frame(exp.means), aes(exp.means)) + geom_histogram(binwidth = 0.1) + geom_rug() + geom_vline(xintercept = mean(exp.means), size = 1, col = "red") + geom_vline(xintercept = 1 / lambda, size = 1, col = "orange") + stat_function(fun = dnorm, args = list(mean = 5, sd = 5))
stat_function(fun = dnorm, args = list(mean = 5, sd = 5))
ggplot(data.frame(exp.means), aes(exp.means)) + stat_function(fun = dnorm, args = list(mean = 5, sd = 5))
ggplot(data.frame(exp.means), aes(exp.means)) + stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = 1 / lambda))
ggplot(data.frame(exp.means), aes(exp.means)) + stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = 1 / lambda)) + geom_histogram(binwidth = 0.1)
ggplot(data.frame(exp.means), aes(exp.means)) + stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = 1 / lambda), size = 2)
ggplot(data.frame(exp.means), aes(exp.means)) + stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = 1 / lambda), size = 2)
ggplot(data.frame(exp.means), aes(exp.means)) + stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = 1 / lambda), size = 2) + geom_histogram()
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(1000))
shapiro.test(exp.means)
?shapiro.test
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
qqnorm(exp.means)
qqline(exp.means)
qqline(exp.means, col = 2)
qqline(exp.means, col = 2, size = 2)
qqline(exp.means, col = 2, width = 2)
df <- ToothGrowth
View(df)
g <- ggplot(ToothGrowth, aes(dose, len))
g + geom_bar()
g + geom_bar(stat = "identity")
g + geom_bar(stat = "identity") + facet_grid(. ~ supp)
g + geom_boxplot() + facet_grid(. ~ supp)
g + geom_boxplot(x = dose) + facet_grid(. ~ supp)
?geom_boxplot
g + geom_boxplot(notch = TRUE) + facet_grid(. ~ supp)
g + geom_boxplot(notch = FALSE) + facet_grid(. ~ supp)
g <- ggplot(ToothGrowth, aes(x = factor(dose), y = len)
)
g + geom_boxplot(notch = FALSE) + facet_grid(. ~ supp)
g + geom_boxplot() + facet_grid(. ~ supp)
t.test(df[df$dose==0.5 && df$supp=="OJ",]$len, df[df$dose==0.5 && df$supp=="VC",]$len)
t.test(df[df$dose==0.5 && df$supp=="OJ",]$len, df[df$dose==0.5 && df$supp=="VC",]$len)
t.test(df[(df$dose==0.5 && df$supp=="OJ"),]$len, df[(df$dose==0.5 && df$supp=="VC"),]$len)
df[(df$dose==0.5 && df$supp=="OJ"),]
df[(df$dose==0.5),]
df[(df$dose==0.5 && df$supp=="OJ"),]
df[(df$dose==0.5 && df$supp==0),]
df[(df$dose==0.5 && df$supp==2),]
df[(df$dose==0.5 && as.ineger(df$supp==2),]
df[(df$dose==0.5 && as.ineger(df$supp==2)),]
df[(df$dose==0.5 && as.integer(df$supp==2)),]
df[(df$dose==0.5 && as.integer(df$supp)==2),]
df.0.5 <- df[df$dose==0.5]
df.0.5 <- df[df$dose==0.5,]
summart(df.0.5$supp)
summary(df.0.5$supp)
df.0.5$supp
len.0.5 <- df[df$dose==0.5,]$len
t.test(len.0.5[11:20], len.0.5[1:10], alternative = "greater")
OJ.5 <- df[df$dose==0.5,]$len[11:20]
VC.5 <- df[df$dose==0.5,]$len[1:10]
t.test(OJ.5, VC.5, alternative = "greater", var.equal = FALSE)
